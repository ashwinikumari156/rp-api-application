package com.scb.channels.research;

import com.scb.channels.foundation.util.jackson.JacksonMarshaller;
import com.scb.channels.foundation.util.jackson.Marshaller;
import com.scb.channels.research.config.JerseyConfig;
import com.scb.channels.research.config.ServiceContextConfig;
import com.scb.channels.research.user.config.UserServiceBeanConfig;
import com.scb.channels.research.user.config.UserServiceCassandraConfig;
import com.scb.channels.research.user.config.UserServiceKafkaConfig;
import com.scb.channels.research.user.config.UserServiceUAASConfig;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.support.SpringBootServletInitializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;

@SpringBootApplication
@EnableConfigurationProperties
@Import({ServiceContextConfig.class, JerseyConfig.class, UserServiceBeanConfig.class, UserServiceCassandraConfig.class, UserServiceKafkaConfig.class, UserServiceUAASConfig.class})
public class RpAPIApplication extends SpringBootServletInitializer {

    @Bean
    public static PropertySourcesPlaceholderConfigurer properties() throws MalformedURLException {
        PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer();
        YamlPropertiesFactoryBean yaml = new YamlPropertiesFactoryBean();
        List<Resource> resources = new ArrayList<>();
        if (null != System.getProperty("rp-api-config")) {
            resources.add(new UrlResource("file:" + System.getProperty("rp-api-config")));
        } else {
            resources.add(new ClassPathResource("rp-api.yml"));
        }
        if (null != System.getProperty("userservice-config")) {
            resources.add(new UrlResource("file:" + System.getProperty("userservice-config")));
        } else {
            resources.add(new ClassPathResource("userservice.yml"));
        }
        yaml.setResources(resources.toArray(new Resource[]{}));
        propertySourcesPlaceholderConfigurer.setProperties(yaml.getObject());
        return propertySourcesPlaceholderConfigurer;
    }

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(RpAPIApplication.class);
    }

    public static void main(String[] args) throws Exception {
        SpringApplication.run(RpAPIApplication.class, args);
    }

    @Bean
    public Marshaller marshaller() {
        return new JacksonMarshaller();
    }

    @Bean
    public RestTemplate restTemplate() {
        RestTemplate template = new RestTemplate();
        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setMaxTotal(100);
        connectionManager.setDefaultMaxPerRoute(6);
        template.setRequestFactory(new HttpComponentsClientHttpRequestFactory(HttpClients.custom().setConnectionManager(connectionManager).build()));
        return template;
    }

}
